# -*- coding: utf-8 -*-
"""code(Task8).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C4ujaIc5ZwRqxOzh7HYNpFn8_l5P1dqu
"""

# Load Dataset
import io
from google.colab import files
uploaded = files.upload()
filename = list(uploaded.keys())[0]
df = pd.read_csv(io.BytesIO(uploaded[filename]))

# Select relevant features for clustering
X = df[['Annual Income (k$)', 'Spending Score (1-100)']]

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Elbow Method to determine optimal K
inertia = []
k_range = range(1, 11)
for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    inertia.append(kmeans.inertia_)

# Plot the Elbow Curve
plt.figure(figsize=(8, 5))
plt.plot(k_range, inertia, marker='o')
plt.title("Elbow Method for Optimal K")
plt.xlabel("Number of clusters (K)")
plt.ylabel("Inertia")
plt.grid(True)
plt.show()

# Fit KMeans with optimal K=5
kmeans = KMeans(n_clusters=5, random_state=42)
clusters = kmeans.fit_predict(X_scaled)

# Assign cluster labels to the dataset
df['Cluster'] = clusters

# Visualize Clusters
plt.figure(figsize=(8, 6))
for cluster_id in range(5):
    plt.scatter(
        X_scaled[clusters == cluster_id, 0],
        X_scaled[clusters == cluster_id, 1],
        label=f'Cluster {cluster_id}'
    )
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1],
            s=200, c='black', marker='X', label='Centroids')
plt.title("Customer Segments (KMeans Clustering)")
plt.xlabel("Annual Income (scaled)")
plt.ylabel("Spending Score (scaled)")
plt.legend()
plt.grid(True)
plt.show()

# Evaluate clustering using Silhouette Score
silhouette = silhouette_score(X_scaled, clusters)
print(f"Silhouette Score: {silhouette:.4f}")